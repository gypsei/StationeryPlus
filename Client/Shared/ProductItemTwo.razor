@inject IProductService ProductService

@*unsuscribe*@
@implements IDisposable


@if (ProductService.Products == null && ProductService.Products.Count == 0){
    <span>Loading Products....</span>
}

else{

    @foreach (var Product in ProductService.Products){
        
     <div class="d-flex col-md-3 align-items-stretch">
    <div class="product-card card">
        <div class="product-card-img">
            <label class="stock bg-success">In Stock</label>
            <img src="@Product.ImageURL" alt="Laptop">
        </div>
        <div class="product-card-body card-body">
            <p class="product-brand">Brand</p>
            <h5 class="product-name">
                        <a class="stretched-link" href="/product/@Product.Id/">
                    @Product.Title
                </a>
            </h5>
            <div>
                <span class="selling-price">Rs @GetPriceText(Product)</span>
                  <span class="original-price">Rs @GetPriceText(Product)</span>
            </div>
            <div class="mt-2">
                <a href="" class="btn btn1">Add To Cart</a>
                <a href="" class="btn btn1"> <i class="bi bi-balloon-heart"></i> </a>
                <a href="" class="btn btn1"> View </a>
            </div>
        </div>
        </div>
    </div>
    }
}
@code {
    private static List<Product> _Products = new List<Product>();

    protected override void OnInitialized(){
        //await ProductService.GetProducts();

        //subscribe event

        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose(){
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product){
        var variants = product.Variants;

        if(variants.Count == 0){
            return string.Empty;
        }

        else if (variants.Count == 1){
            return $"{variants[0].Price}";
        }

        decimal minPrice = variants.Min(v => v.Price);

        return $"Starting at {minPrice}";
    }


}
